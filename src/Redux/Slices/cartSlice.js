import { createSlice } from "@reduxjs/toolkit";

// Define the initial state for the cart
const initialState = {
  cartItems: [],
  totalAmount: 0,
  totalQuantity: 0,
};

// Create a slice for the cart using Redux Toolkit
const cartSlice = createSlice({
  name: "cart", // Name of the slice
  initialState, // Initial state for the slice
  reducers: {
    // Action to add an item to the cart
    addItem: (state, action) => {
      const newItem = action.payload; // New item to be added to the cart
      const existingItem = state.cartItems.find((item) => item.id === newItem.id); // Check if the item already exists in the cart
      state.totalQuantity++; // Increment the total quantity in the cart

      if (!existingItem) {
        // If the item does not exist in the cart, add it as a new item
        state.cartItems.push({
          id: newItem.id,
          productName: newItem.productName,
          imgUrl: newItem.imgUrl,
          price: newItem.price,
          quantity: 1,
          totalPrice: newItem.price,
        });
      } else {
        // If the item already exists in the cart, update its quantity and total price
        existingItem.quantity++;
        existingItem.totalPrice = Number(existingItem.totalPrice) + Number(newItem.price);
      }

      // Calculate the total amount in the cart by summing the prices of all items
      state.totalAmount = state.cartItems.reduce(
        (total, item) => total + Number(item.price) * Number(item.quantity),
        0
      );
    },
    // Action to delete an item from the cart
    deleteItem: (state, action) => {
      const id = action.payload; // ID of the item to be deleted
      const existingItem = state.cartItems.find((item) => item.id === id); // Find the item in the cart

      if (existingItem) {
        // If the item exists in the cart, remove it and decrement the total quantity
        state.cartItems = state.cartItems.filter((item) => item.id !== id);
        state.totalQuantity -= existingItem.quantity;
      }

      // Recalculate the total amount in the cart after removing the item
      state.totalAmount = state.cartItems.reduce(
        (total, item) => total + Number(item.price) * Number(item.quantity),
        0
      );
    },
  },
});

// Export the actions generated by the cart slice
export const cartActions = cartSlice.actions;

// Export the cart reducer
export default cartSlice.reducer;
